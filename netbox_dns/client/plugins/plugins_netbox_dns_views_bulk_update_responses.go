// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ProtonMail/go-netbox-dns/netbox_dns/models"
)

// PluginsNetboxDNSViewsBulkUpdateReader is a Reader for the PluginsNetboxDNSViewsBulkUpdate structure.
type PluginsNetboxDNSViewsBulkUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PluginsNetboxDNSViewsBulkUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPluginsNetboxDNSViewsBulkUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPluginsNetboxDNSViewsBulkUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPluginsNetboxDNSViewsBulkUpdateOK creates a PluginsNetboxDNSViewsBulkUpdateOK with default headers values
func NewPluginsNetboxDNSViewsBulkUpdateOK() *PluginsNetboxDNSViewsBulkUpdateOK {
	return &PluginsNetboxDNSViewsBulkUpdateOK{}
}

/*
PluginsNetboxDNSViewsBulkUpdateOK describes a response with status code 200, with default header values.

PluginsNetboxDNSViewsBulkUpdateOK plugins netbox Dns views bulk update o k
*/
type PluginsNetboxDNSViewsBulkUpdateOK struct {
	Payload *models.View
}

// IsSuccess returns true when this plugins netbox Dns views bulk update o k response has a 2xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this plugins netbox Dns views bulk update o k response has a 3xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugins netbox Dns views bulk update o k response has a 4xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugins netbox Dns views bulk update o k response has a 5xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this plugins netbox Dns views bulk update o k response a status code equal to that given
func (o *PluginsNetboxDNSViewsBulkUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the plugins netbox Dns views bulk update o k response
func (o *PluginsNetboxDNSViewsBulkUpdateOK) Code() int {
	return 200
}

func (o *PluginsNetboxDNSViewsBulkUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /plugins/netbox-dns/views/][%d] pluginsNetboxDnsViewsBulkUpdateOK  %+v", 200, o.Payload)
}

func (o *PluginsNetboxDNSViewsBulkUpdateOK) String() string {
	return fmt.Sprintf("[PUT /plugins/netbox-dns/views/][%d] pluginsNetboxDnsViewsBulkUpdateOK  %+v", 200, o.Payload)
}

func (o *PluginsNetboxDNSViewsBulkUpdateOK) GetPayload() *models.View {
	return o.Payload
}

func (o *PluginsNetboxDNSViewsBulkUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.View)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginsNetboxDNSViewsBulkUpdateDefault creates a PluginsNetboxDNSViewsBulkUpdateDefault with default headers values
func NewPluginsNetboxDNSViewsBulkUpdateDefault(code int) *PluginsNetboxDNSViewsBulkUpdateDefault {
	return &PluginsNetboxDNSViewsBulkUpdateDefault{
		_statusCode: code,
	}
}

/*
PluginsNetboxDNSViewsBulkUpdateDefault describes a response with status code -1, with default header values.

PluginsNetboxDNSViewsBulkUpdateDefault plugins netbox dns views bulk update default
*/
type PluginsNetboxDNSViewsBulkUpdateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this plugins netbox dns views bulk update default response has a 2xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this plugins netbox dns views bulk update default response has a 3xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this plugins netbox dns views bulk update default response has a 4xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this plugins netbox dns views bulk update default response has a 5xx status code
func (o *PluginsNetboxDNSViewsBulkUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this plugins netbox dns views bulk update default response a status code equal to that given
func (o *PluginsNetboxDNSViewsBulkUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the plugins netbox dns views bulk update default response
func (o *PluginsNetboxDNSViewsBulkUpdateDefault) Code() int {
	return o._statusCode
}

func (o *PluginsNetboxDNSViewsBulkUpdateDefault) Error() string {
	return fmt.Sprintf("[PUT /plugins/netbox-dns/views/][%d] plugins_netbox-dns_views_bulk_update default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSViewsBulkUpdateDefault) String() string {
	return fmt.Sprintf("[PUT /plugins/netbox-dns/views/][%d] plugins_netbox-dns_views_bulk_update default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSViewsBulkUpdateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *PluginsNetboxDNSViewsBulkUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
