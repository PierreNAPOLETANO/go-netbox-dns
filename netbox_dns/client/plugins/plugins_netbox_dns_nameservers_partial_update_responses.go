// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ProtonMail/go-netbox-dns/netbox_dns/models"
)

// PluginsNetboxDNSNameserversPartialUpdateReader is a Reader for the PluginsNetboxDNSNameserversPartialUpdate structure.
type PluginsNetboxDNSNameserversPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PluginsNetboxDNSNameserversPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPluginsNetboxDNSNameserversPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPluginsNetboxDNSNameserversPartialUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPluginsNetboxDNSNameserversPartialUpdateOK creates a PluginsNetboxDNSNameserversPartialUpdateOK with default headers values
func NewPluginsNetboxDNSNameserversPartialUpdateOK() *PluginsNetboxDNSNameserversPartialUpdateOK {
	return &PluginsNetboxDNSNameserversPartialUpdateOK{}
}

/*
PluginsNetboxDNSNameserversPartialUpdateOK describes a response with status code 200, with default header values.

PluginsNetboxDNSNameserversPartialUpdateOK plugins netbox Dns nameservers partial update o k
*/
type PluginsNetboxDNSNameserversPartialUpdateOK struct {
	Payload *models.NameServer
}

// IsSuccess returns true when this plugins netbox Dns nameservers partial update o k response has a 2xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this plugins netbox Dns nameservers partial update o k response has a 3xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugins netbox Dns nameservers partial update o k response has a 4xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugins netbox Dns nameservers partial update o k response has a 5xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this plugins netbox Dns nameservers partial update o k response a status code equal to that given
func (o *PluginsNetboxDNSNameserversPartialUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the plugins netbox Dns nameservers partial update o k response
func (o *PluginsNetboxDNSNameserversPartialUpdateOK) Code() int {
	return 200
}

func (o *PluginsNetboxDNSNameserversPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/nameservers/{id}/][%d] pluginsNetboxDnsNameserversPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *PluginsNetboxDNSNameserversPartialUpdateOK) String() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/nameservers/{id}/][%d] pluginsNetboxDnsNameserversPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *PluginsNetboxDNSNameserversPartialUpdateOK) GetPayload() *models.NameServer {
	return o.Payload
}

func (o *PluginsNetboxDNSNameserversPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NameServer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginsNetboxDNSNameserversPartialUpdateDefault creates a PluginsNetboxDNSNameserversPartialUpdateDefault with default headers values
func NewPluginsNetboxDNSNameserversPartialUpdateDefault(code int) *PluginsNetboxDNSNameserversPartialUpdateDefault {
	return &PluginsNetboxDNSNameserversPartialUpdateDefault{
		_statusCode: code,
	}
}

/*
PluginsNetboxDNSNameserversPartialUpdateDefault describes a response with status code -1, with default header values.

PluginsNetboxDNSNameserversPartialUpdateDefault plugins netbox dns nameservers partial update default
*/
type PluginsNetboxDNSNameserversPartialUpdateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this plugins netbox dns nameservers partial update default response has a 2xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this plugins netbox dns nameservers partial update default response has a 3xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this plugins netbox dns nameservers partial update default response has a 4xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this plugins netbox dns nameservers partial update default response has a 5xx status code
func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this plugins netbox dns nameservers partial update default response a status code equal to that given
func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the plugins netbox dns nameservers partial update default response
func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) Code() int {
	return o._statusCode
}

func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) Error() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/nameservers/{id}/][%d] plugins_netbox-dns_nameservers_partial_update default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) String() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/nameservers/{id}/][%d] plugins_netbox-dns_nameservers_partial_update default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *PluginsNetboxDNSNameserversPartialUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
