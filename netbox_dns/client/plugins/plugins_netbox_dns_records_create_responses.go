// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ProtonMail/go-netbox-dns/netbox_dns/models"
)

// PluginsNetboxDNSRecordsCreateReader is a Reader for the PluginsNetboxDNSRecordsCreate structure.
type PluginsNetboxDNSRecordsCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PluginsNetboxDNSRecordsCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPluginsNetboxDNSRecordsCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPluginsNetboxDNSRecordsCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPluginsNetboxDNSRecordsCreateCreated creates a PluginsNetboxDNSRecordsCreateCreated with default headers values
func NewPluginsNetboxDNSRecordsCreateCreated() *PluginsNetboxDNSRecordsCreateCreated {
	return &PluginsNetboxDNSRecordsCreateCreated{}
}

/*
PluginsNetboxDNSRecordsCreateCreated describes a response with status code 201, with default header values.

PluginsNetboxDNSRecordsCreateCreated plugins netbox Dns records create created
*/
type PluginsNetboxDNSRecordsCreateCreated struct {
	Payload *models.Record
}

// IsSuccess returns true when this plugins netbox Dns records create created response has a 2xx status code
func (o *PluginsNetboxDNSRecordsCreateCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this plugins netbox Dns records create created response has a 3xx status code
func (o *PluginsNetboxDNSRecordsCreateCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugins netbox Dns records create created response has a 4xx status code
func (o *PluginsNetboxDNSRecordsCreateCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugins netbox Dns records create created response has a 5xx status code
func (o *PluginsNetboxDNSRecordsCreateCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this plugins netbox Dns records create created response a status code equal to that given
func (o *PluginsNetboxDNSRecordsCreateCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the plugins netbox Dns records create created response
func (o *PluginsNetboxDNSRecordsCreateCreated) Code() int {
	return 201
}

func (o *PluginsNetboxDNSRecordsCreateCreated) Error() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/records/][%d] pluginsNetboxDnsRecordsCreateCreated  %+v", 201, o.Payload)
}

func (o *PluginsNetboxDNSRecordsCreateCreated) String() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/records/][%d] pluginsNetboxDnsRecordsCreateCreated  %+v", 201, o.Payload)
}

func (o *PluginsNetboxDNSRecordsCreateCreated) GetPayload() *models.Record {
	return o.Payload
}

func (o *PluginsNetboxDNSRecordsCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Record)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginsNetboxDNSRecordsCreateDefault creates a PluginsNetboxDNSRecordsCreateDefault with default headers values
func NewPluginsNetboxDNSRecordsCreateDefault(code int) *PluginsNetboxDNSRecordsCreateDefault {
	return &PluginsNetboxDNSRecordsCreateDefault{
		_statusCode: code,
	}
}

/*
PluginsNetboxDNSRecordsCreateDefault describes a response with status code -1, with default header values.

PluginsNetboxDNSRecordsCreateDefault plugins netbox dns records create default
*/
type PluginsNetboxDNSRecordsCreateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this plugins netbox dns records create default response has a 2xx status code
func (o *PluginsNetboxDNSRecordsCreateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this plugins netbox dns records create default response has a 3xx status code
func (o *PluginsNetboxDNSRecordsCreateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this plugins netbox dns records create default response has a 4xx status code
func (o *PluginsNetboxDNSRecordsCreateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this plugins netbox dns records create default response has a 5xx status code
func (o *PluginsNetboxDNSRecordsCreateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this plugins netbox dns records create default response a status code equal to that given
func (o *PluginsNetboxDNSRecordsCreateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the plugins netbox dns records create default response
func (o *PluginsNetboxDNSRecordsCreateDefault) Code() int {
	return o._statusCode
}

func (o *PluginsNetboxDNSRecordsCreateDefault) Error() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/records/][%d] plugins_netbox-dns_records_create default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSRecordsCreateDefault) String() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/records/][%d] plugins_netbox-dns_records_create default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSRecordsCreateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *PluginsNetboxDNSRecordsCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
