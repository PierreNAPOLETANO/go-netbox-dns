// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new plugins API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugins API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PluginsNetboxDNSNameserversBulkDelete(params *PluginsNetboxDNSNameserversBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversBulkDeleteNoContent, error)

	PluginsNetboxDNSNameserversBulkPartialUpdate(params *PluginsNetboxDNSNameserversBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversBulkPartialUpdateOK, error)

	PluginsNetboxDNSNameserversBulkUpdate(params *PluginsNetboxDNSNameserversBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversBulkUpdateOK, error)

	PluginsNetboxDNSNameserversCreate(params *PluginsNetboxDNSNameserversCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversCreateCreated, error)

	PluginsNetboxDNSNameserversDelete(params *PluginsNetboxDNSNameserversDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversDeleteNoContent, error)

	PluginsNetboxDNSNameserversList(params *PluginsNetboxDNSNameserversListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversListOK, error)

	PluginsNetboxDNSNameserversPartialUpdate(params *PluginsNetboxDNSNameserversPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversPartialUpdateOK, error)

	PluginsNetboxDNSNameserversRead(params *PluginsNetboxDNSNameserversReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversReadOK, error)

	PluginsNetboxDNSNameserversUpdate(params *PluginsNetboxDNSNameserversUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversUpdateOK, error)

	PluginsNetboxDNSNameserversZones(params *PluginsNetboxDNSNameserversZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversZonesOK, error)

	PluginsNetboxDNSRecordsBulkDelete(params *PluginsNetboxDNSRecordsBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsBulkDeleteNoContent, error)

	PluginsNetboxDNSRecordsBulkPartialUpdate(params *PluginsNetboxDNSRecordsBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsBulkPartialUpdateOK, error)

	PluginsNetboxDNSRecordsBulkUpdate(params *PluginsNetboxDNSRecordsBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsBulkUpdateOK, error)

	PluginsNetboxDNSRecordsCreate(params *PluginsNetboxDNSRecordsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsCreateCreated, error)

	PluginsNetboxDNSRecordsDelete(params *PluginsNetboxDNSRecordsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsDeleteNoContent, error)

	PluginsNetboxDNSRecordsList(params *PluginsNetboxDNSRecordsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsListOK, error)

	PluginsNetboxDNSRecordsPartialUpdate(params *PluginsNetboxDNSRecordsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsPartialUpdateOK, error)

	PluginsNetboxDNSRecordsRead(params *PluginsNetboxDNSRecordsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsReadOK, error)

	PluginsNetboxDNSRecordsUpdate(params *PluginsNetboxDNSRecordsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsUpdateOK, error)

	PluginsNetboxDNSViewsBulkDelete(params *PluginsNetboxDNSViewsBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsBulkDeleteNoContent, error)

	PluginsNetboxDNSViewsBulkPartialUpdate(params *PluginsNetboxDNSViewsBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsBulkPartialUpdateOK, error)

	PluginsNetboxDNSViewsBulkUpdate(params *PluginsNetboxDNSViewsBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsBulkUpdateOK, error)

	PluginsNetboxDNSViewsCreate(params *PluginsNetboxDNSViewsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsCreateCreated, error)

	PluginsNetboxDNSViewsDelete(params *PluginsNetboxDNSViewsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsDeleteNoContent, error)

	PluginsNetboxDNSViewsList(params *PluginsNetboxDNSViewsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsListOK, error)

	PluginsNetboxDNSViewsPartialUpdate(params *PluginsNetboxDNSViewsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsPartialUpdateOK, error)

	PluginsNetboxDNSViewsRead(params *PluginsNetboxDNSViewsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsReadOK, error)

	PluginsNetboxDNSViewsUpdate(params *PluginsNetboxDNSViewsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsUpdateOK, error)

	PluginsNetboxDNSViewsViews(params *PluginsNetboxDNSViewsViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsViewsOK, error)

	PluginsNetboxDNSZonesBulkDelete(params *PluginsNetboxDNSZonesBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesBulkDeleteNoContent, error)

	PluginsNetboxDNSZonesBulkPartialUpdate(params *PluginsNetboxDNSZonesBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesBulkPartialUpdateOK, error)

	PluginsNetboxDNSZonesBulkUpdate(params *PluginsNetboxDNSZonesBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesBulkUpdateOK, error)

	PluginsNetboxDNSZonesCreate(params *PluginsNetboxDNSZonesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesCreateCreated, error)

	PluginsNetboxDNSZonesDelete(params *PluginsNetboxDNSZonesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesDeleteNoContent, error)

	PluginsNetboxDNSZonesList(params *PluginsNetboxDNSZonesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesListOK, error)

	PluginsNetboxDNSZonesNameservers(params *PluginsNetboxDNSZonesNameserversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesNameserversOK, error)

	PluginsNetboxDNSZonesPartialUpdate(params *PluginsNetboxDNSZonesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesPartialUpdateOK, error)

	PluginsNetboxDNSZonesRead(params *PluginsNetboxDNSZonesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesReadOK, error)

	PluginsNetboxDNSZonesRecords(params *PluginsNetboxDNSZonesRecordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesRecordsOK, error)

	PluginsNetboxDNSZonesUpdate(params *PluginsNetboxDNSZonesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PluginsNetboxDNSNameserversBulkDelete plugins netbox dns nameservers bulk delete API
*/
func (a *Client) PluginsNetboxDNSNameserversBulkDelete(params *PluginsNetboxDNSNameserversBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversBulkDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversBulkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_bulk_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/nameservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversBulkDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversBulkDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversBulkDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversBulkPartialUpdate plugins netbox dns nameservers bulk partial update API
*/
func (a *Client) PluginsNetboxDNSNameserversBulkPartialUpdate(params *PluginsNetboxDNSNameserversBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversBulkPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversBulkPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_bulk_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/nameservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversBulkPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversBulkPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversBulkPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversBulkUpdate plugins netbox dns nameservers bulk update API
*/
func (a *Client) PluginsNetboxDNSNameserversBulkUpdate(params *PluginsNetboxDNSNameserversBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversBulkUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversBulkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_bulk_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/nameservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversBulkUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversBulkUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversBulkUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversCreate plugins netbox dns nameservers create API
*/
func (a *Client) PluginsNetboxDNSNameserversCreate(params *PluginsNetboxDNSNameserversCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_create",
		Method:             "POST",
		PathPattern:        "/plugins/netbox-dns/nameservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversDelete plugins netbox dns nameservers delete API
*/
func (a *Client) PluginsNetboxDNSNameserversDelete(params *PluginsNetboxDNSNameserversDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/nameservers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversList plugins netbox dns nameservers list API
*/
func (a *Client) PluginsNetboxDNSNameserversList(params *PluginsNetboxDNSNameserversListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_list",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/nameservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversPartialUpdate plugins netbox dns nameservers partial update API
*/
func (a *Client) PluginsNetboxDNSNameserversPartialUpdate(params *PluginsNetboxDNSNameserversPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/nameservers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversRead plugins netbox dns nameservers read API
*/
func (a *Client) PluginsNetboxDNSNameserversRead(params *PluginsNetboxDNSNameserversReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_read",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/nameservers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversUpdate plugins netbox dns nameservers update API
*/
func (a *Client) PluginsNetboxDNSNameserversUpdate(params *PluginsNetboxDNSNameserversUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/nameservers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSNameserversZones plugins netbox dns nameservers zones API
*/
func (a *Client) PluginsNetboxDNSNameserversZones(params *PluginsNetboxDNSNameserversZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSNameserversZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSNameserversZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_nameservers_zones",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/nameservers/{id}/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSNameserversZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSNameserversZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSNameserversZonesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsBulkDelete plugins netbox dns records bulk delete API
*/
func (a *Client) PluginsNetboxDNSRecordsBulkDelete(params *PluginsNetboxDNSRecordsBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsBulkDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsBulkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_bulk_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsBulkDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsBulkDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsBulkDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsBulkPartialUpdate plugins netbox dns records bulk partial update API
*/
func (a *Client) PluginsNetboxDNSRecordsBulkPartialUpdate(params *PluginsNetboxDNSRecordsBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsBulkPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsBulkPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_bulk_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsBulkPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsBulkPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsBulkPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsBulkUpdate plugins netbox dns records bulk update API
*/
func (a *Client) PluginsNetboxDNSRecordsBulkUpdate(params *PluginsNetboxDNSRecordsBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsBulkUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsBulkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_bulk_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsBulkUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsBulkUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsBulkUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsCreate plugins netbox dns records create API
*/
func (a *Client) PluginsNetboxDNSRecordsCreate(params *PluginsNetboxDNSRecordsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_create",
		Method:             "POST",
		PathPattern:        "/plugins/netbox-dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsDelete plugins netbox dns records delete API
*/
func (a *Client) PluginsNetboxDNSRecordsDelete(params *PluginsNetboxDNSRecordsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/records/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsList plugins netbox dns records list API
*/
func (a *Client) PluginsNetboxDNSRecordsList(params *PluginsNetboxDNSRecordsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_list",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsPartialUpdate plugins netbox dns records partial update API
*/
func (a *Client) PluginsNetboxDNSRecordsPartialUpdate(params *PluginsNetboxDNSRecordsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/records/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsRead plugins netbox dns records read API
*/
func (a *Client) PluginsNetboxDNSRecordsRead(params *PluginsNetboxDNSRecordsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_read",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/records/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSRecordsUpdate plugins netbox dns records update API
*/
func (a *Client) PluginsNetboxDNSRecordsUpdate(params *PluginsNetboxDNSRecordsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSRecordsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSRecordsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_records_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/records/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSRecordsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSRecordsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSRecordsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsBulkDelete plugins netbox dns views bulk delete API
*/
func (a *Client) PluginsNetboxDNSViewsBulkDelete(params *PluginsNetboxDNSViewsBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsBulkDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsBulkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_bulk_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/views/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsBulkDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsBulkDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsBulkDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsBulkPartialUpdate plugins netbox dns views bulk partial update API
*/
func (a *Client) PluginsNetboxDNSViewsBulkPartialUpdate(params *PluginsNetboxDNSViewsBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsBulkPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsBulkPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_bulk_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/views/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsBulkPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsBulkPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsBulkPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsBulkUpdate plugins netbox dns views bulk update API
*/
func (a *Client) PluginsNetboxDNSViewsBulkUpdate(params *PluginsNetboxDNSViewsBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsBulkUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsBulkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_bulk_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/views/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsBulkUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsBulkUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsBulkUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsCreate plugins netbox dns views create API
*/
func (a *Client) PluginsNetboxDNSViewsCreate(params *PluginsNetboxDNSViewsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_create",
		Method:             "POST",
		PathPattern:        "/plugins/netbox-dns/views/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsDelete plugins netbox dns views delete API
*/
func (a *Client) PluginsNetboxDNSViewsDelete(params *PluginsNetboxDNSViewsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/views/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsList plugins netbox dns views list API
*/
func (a *Client) PluginsNetboxDNSViewsList(params *PluginsNetboxDNSViewsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_list",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/views/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsPartialUpdate plugins netbox dns views partial update API
*/
func (a *Client) PluginsNetboxDNSViewsPartialUpdate(params *PluginsNetboxDNSViewsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/views/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsRead plugins netbox dns views read API
*/
func (a *Client) PluginsNetboxDNSViewsRead(params *PluginsNetboxDNSViewsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_read",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/views/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsUpdate plugins netbox dns views update API
*/
func (a *Client) PluginsNetboxDNSViewsUpdate(params *PluginsNetboxDNSViewsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/views/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSViewsViews plugins netbox dns views views API
*/
func (a *Client) PluginsNetboxDNSViewsViews(params *PluginsNetboxDNSViewsViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSViewsViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSViewsViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_views_views",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/views/{id}/views/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSViewsViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSViewsViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSViewsViewsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesBulkDelete plugins netbox dns zones bulk delete API
*/
func (a *Client) PluginsNetboxDNSZonesBulkDelete(params *PluginsNetboxDNSZonesBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesBulkDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesBulkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_bulk_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesBulkDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesBulkDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesBulkDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesBulkPartialUpdate plugins netbox dns zones bulk partial update API
*/
func (a *Client) PluginsNetboxDNSZonesBulkPartialUpdate(params *PluginsNetboxDNSZonesBulkPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesBulkPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesBulkPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_bulk_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesBulkPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesBulkPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesBulkPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesBulkUpdate plugins netbox dns zones bulk update API
*/
func (a *Client) PluginsNetboxDNSZonesBulkUpdate(params *PluginsNetboxDNSZonesBulkUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesBulkUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesBulkUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_bulk_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesBulkUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesBulkUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesBulkUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesCreate plugins netbox dns zones create API
*/
func (a *Client) PluginsNetboxDNSZonesCreate(params *PluginsNetboxDNSZonesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_create",
		Method:             "POST",
		PathPattern:        "/plugins/netbox-dns/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesDelete plugins netbox dns zones delete API
*/
func (a *Client) PluginsNetboxDNSZonesDelete(params *PluginsNetboxDNSZonesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_delete",
		Method:             "DELETE",
		PathPattern:        "/plugins/netbox-dns/zones/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesList plugins netbox dns zones list API
*/
func (a *Client) PluginsNetboxDNSZonesList(params *PluginsNetboxDNSZonesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_list",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/zones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesNameservers plugins netbox dns zones nameservers API
*/
func (a *Client) PluginsNetboxDNSZonesNameservers(params *PluginsNetboxDNSZonesNameserversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesNameserversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesNameserversParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_nameservers",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/zones/{id}/nameservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesNameserversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesNameserversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesNameserversDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesPartialUpdate plugins netbox dns zones partial update API
*/
func (a *Client) PluginsNetboxDNSZonesPartialUpdate(params *PluginsNetboxDNSZonesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_partial_update",
		Method:             "PATCH",
		PathPattern:        "/plugins/netbox-dns/zones/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesPartialUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesRead plugins netbox dns zones read API
*/
func (a *Client) PluginsNetboxDNSZonesRead(params *PluginsNetboxDNSZonesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_read",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/zones/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesRecords plugins netbox dns zones records API
*/
func (a *Client) PluginsNetboxDNSZonesRecords(params *PluginsNetboxDNSZonesRecordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesRecordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_records",
		Method:             "GET",
		PathPattern:        "/plugins/netbox-dns/zones/{id}/records/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesRecordsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PluginsNetboxDNSZonesUpdate plugins netbox dns zones update API
*/
func (a *Client) PluginsNetboxDNSZonesUpdate(params *PluginsNetboxDNSZonesUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PluginsNetboxDNSZonesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginsNetboxDNSZonesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "plugins_netbox-dns_zones_update",
		Method:             "PUT",
		PathPattern:        "/plugins/netbox-dns/zones/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PluginsNetboxDNSZonesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PluginsNetboxDNSZonesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PluginsNetboxDNSZonesUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
