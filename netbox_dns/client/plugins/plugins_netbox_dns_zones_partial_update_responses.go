// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ProtonMail/go-netbox-dns/netbox_dns/models"
)

// PluginsNetboxDNSZonesPartialUpdateReader is a Reader for the PluginsNetboxDNSZonesPartialUpdate structure.
type PluginsNetboxDNSZonesPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PluginsNetboxDNSZonesPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPluginsNetboxDNSZonesPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPluginsNetboxDNSZonesPartialUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPluginsNetboxDNSZonesPartialUpdateOK creates a PluginsNetboxDNSZonesPartialUpdateOK with default headers values
func NewPluginsNetboxDNSZonesPartialUpdateOK() *PluginsNetboxDNSZonesPartialUpdateOK {
	return &PluginsNetboxDNSZonesPartialUpdateOK{}
}

/*
PluginsNetboxDNSZonesPartialUpdateOK describes a response with status code 200, with default header values.

PluginsNetboxDNSZonesPartialUpdateOK plugins netbox Dns zones partial update o k
*/
type PluginsNetboxDNSZonesPartialUpdateOK struct {
	Payload *models.Zone
}

// IsSuccess returns true when this plugins netbox Dns zones partial update o k response has a 2xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this plugins netbox Dns zones partial update o k response has a 3xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugins netbox Dns zones partial update o k response has a 4xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugins netbox Dns zones partial update o k response has a 5xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this plugins netbox Dns zones partial update o k response a status code equal to that given
func (o *PluginsNetboxDNSZonesPartialUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the plugins netbox Dns zones partial update o k response
func (o *PluginsNetboxDNSZonesPartialUpdateOK) Code() int {
	return 200
}

func (o *PluginsNetboxDNSZonesPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/zones/{id}/][%d] pluginsNetboxDnsZonesPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *PluginsNetboxDNSZonesPartialUpdateOK) String() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/zones/{id}/][%d] pluginsNetboxDnsZonesPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *PluginsNetboxDNSZonesPartialUpdateOK) GetPayload() *models.Zone {
	return o.Payload
}

func (o *PluginsNetboxDNSZonesPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Zone)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginsNetboxDNSZonesPartialUpdateDefault creates a PluginsNetboxDNSZonesPartialUpdateDefault with default headers values
func NewPluginsNetboxDNSZonesPartialUpdateDefault(code int) *PluginsNetboxDNSZonesPartialUpdateDefault {
	return &PluginsNetboxDNSZonesPartialUpdateDefault{
		_statusCode: code,
	}
}

/*
PluginsNetboxDNSZonesPartialUpdateDefault describes a response with status code -1, with default header values.

PluginsNetboxDNSZonesPartialUpdateDefault plugins netbox dns zones partial update default
*/
type PluginsNetboxDNSZonesPartialUpdateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this plugins netbox dns zones partial update default response has a 2xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this plugins netbox dns zones partial update default response has a 3xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this plugins netbox dns zones partial update default response has a 4xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this plugins netbox dns zones partial update default response has a 5xx status code
func (o *PluginsNetboxDNSZonesPartialUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this plugins netbox dns zones partial update default response a status code equal to that given
func (o *PluginsNetboxDNSZonesPartialUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the plugins netbox dns zones partial update default response
func (o *PluginsNetboxDNSZonesPartialUpdateDefault) Code() int {
	return o._statusCode
}

func (o *PluginsNetboxDNSZonesPartialUpdateDefault) Error() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/zones/{id}/][%d] plugins_netbox-dns_zones_partial_update default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSZonesPartialUpdateDefault) String() string {
	return fmt.Sprintf("[PATCH /plugins/netbox-dns/zones/{id}/][%d] plugins_netbox-dns_zones_partial_update default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSZonesPartialUpdateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *PluginsNetboxDNSZonesPartialUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
