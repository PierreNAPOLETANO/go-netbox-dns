// Code generated by go-swagger; DO NOT EDIT.

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ProtonMail/go-netbox-dns/netbox_dns/models"
)

// PluginsNetboxDNSNameserversCreateReader is a Reader for the PluginsNetboxDNSNameserversCreate structure.
type PluginsNetboxDNSNameserversCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PluginsNetboxDNSNameserversCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPluginsNetboxDNSNameserversCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPluginsNetboxDNSNameserversCreateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPluginsNetboxDNSNameserversCreateCreated creates a PluginsNetboxDNSNameserversCreateCreated with default headers values
func NewPluginsNetboxDNSNameserversCreateCreated() *PluginsNetboxDNSNameserversCreateCreated {
	return &PluginsNetboxDNSNameserversCreateCreated{}
}

/*
PluginsNetboxDNSNameserversCreateCreated describes a response with status code 201, with default header values.

PluginsNetboxDNSNameserversCreateCreated plugins netbox Dns nameservers create created
*/
type PluginsNetboxDNSNameserversCreateCreated struct {
	Payload *models.NameServer
}

// IsSuccess returns true when this plugins netbox Dns nameservers create created response has a 2xx status code
func (o *PluginsNetboxDNSNameserversCreateCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this plugins netbox Dns nameservers create created response has a 3xx status code
func (o *PluginsNetboxDNSNameserversCreateCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this plugins netbox Dns nameservers create created response has a 4xx status code
func (o *PluginsNetboxDNSNameserversCreateCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this plugins netbox Dns nameservers create created response has a 5xx status code
func (o *PluginsNetboxDNSNameserversCreateCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this plugins netbox Dns nameservers create created response a status code equal to that given
func (o *PluginsNetboxDNSNameserversCreateCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the plugins netbox Dns nameservers create created response
func (o *PluginsNetboxDNSNameserversCreateCreated) Code() int {
	return 201
}

func (o *PluginsNetboxDNSNameserversCreateCreated) Error() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/nameservers/][%d] pluginsNetboxDnsNameserversCreateCreated  %+v", 201, o.Payload)
}

func (o *PluginsNetboxDNSNameserversCreateCreated) String() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/nameservers/][%d] pluginsNetboxDnsNameserversCreateCreated  %+v", 201, o.Payload)
}

func (o *PluginsNetboxDNSNameserversCreateCreated) GetPayload() *models.NameServer {
	return o.Payload
}

func (o *PluginsNetboxDNSNameserversCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NameServer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPluginsNetboxDNSNameserversCreateDefault creates a PluginsNetboxDNSNameserversCreateDefault with default headers values
func NewPluginsNetboxDNSNameserversCreateDefault(code int) *PluginsNetboxDNSNameserversCreateDefault {
	return &PluginsNetboxDNSNameserversCreateDefault{
		_statusCode: code,
	}
}

/*
PluginsNetboxDNSNameserversCreateDefault describes a response with status code -1, with default header values.

PluginsNetboxDNSNameserversCreateDefault plugins netbox dns nameservers create default
*/
type PluginsNetboxDNSNameserversCreateDefault struct {
	_statusCode int

	Payload interface{}
}

// IsSuccess returns true when this plugins netbox dns nameservers create default response has a 2xx status code
func (o *PluginsNetboxDNSNameserversCreateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this plugins netbox dns nameservers create default response has a 3xx status code
func (o *PluginsNetboxDNSNameserversCreateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this plugins netbox dns nameservers create default response has a 4xx status code
func (o *PluginsNetboxDNSNameserversCreateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this plugins netbox dns nameservers create default response has a 5xx status code
func (o *PluginsNetboxDNSNameserversCreateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this plugins netbox dns nameservers create default response a status code equal to that given
func (o *PluginsNetboxDNSNameserversCreateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the plugins netbox dns nameservers create default response
func (o *PluginsNetboxDNSNameserversCreateDefault) Code() int {
	return o._statusCode
}

func (o *PluginsNetboxDNSNameserversCreateDefault) Error() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/nameservers/][%d] plugins_netbox-dns_nameservers_create default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSNameserversCreateDefault) String() string {
	return fmt.Sprintf("[POST /plugins/netbox-dns/nameservers/][%d] plugins_netbox-dns_nameservers_create default  %+v", o._statusCode, o.Payload)
}

func (o *PluginsNetboxDNSNameserversCreateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *PluginsNetboxDNSNameserversCreateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
