// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritableZone writable zone
//
// swagger:model WritableZone
type WritableZone struct {

	// Active
	// Read Only: true
	Active *bool `json:"active,omitempty"`

	// Created
	// Read Only: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created,omitempty"`

	// Custom fields
	CustomFields interface{} `json:"custom_fields,omitempty"`

	// Default TTL
	// Maximum: 2.147483647e+09
	// Minimum: 1
	DefaultTTL int64 `json:"default_ttl,omitempty"`

	// Description
	// Max Length: 200
	Description string `json:"description,omitempty"`

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Last updated
	// Read Only: true
	// Format: date-time
	LastUpdated *strfmt.DateTime `json:"last_updated,omitempty"`

	// Name
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Name *string `json:"name"`

	// Nameservers for the zone
	Nameservers []*NestedNameServer `json:"nameservers"`

	// SOA Expire
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: 1
	SoaExpire *int64 `json:"soa_expire"`

	// SOA Minimum TTL
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: 1
	SoaMinimum *int64 `json:"soa_minimum"`

	// SOA MName
	// Required: true
	SoaMname *int64 `json:"soa_mname"`

	// SOA Refresh
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: 1
	SoaRefresh *int64 `json:"soa_refresh"`

	// SOA Retry
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: 1
	SoaRetry *int64 `json:"soa_retry"`

	// SOA RName
	// Required: true
	// Max Length: 255
	// Min Length: 1
	SoaRname *string `json:"soa_rname"`

	// SOA Serial
	// Maximum: 4.294967295e+09
	// Minimum: 1
	SoaSerial *int64 `json:"soa_serial,omitempty"`

	// Generate SOA Serial
	//
	// Automatically generate the SOA Serial field
	SoaSerialAuto bool `json:"soa_serial_auto,omitempty"`

	// SOA TTL
	// Required: true
	// Maximum: 2.147483647e+09
	// Minimum: 1
	SoaTTL *int64 `json:"soa_ttl"`

	// Status
	// Enum: [active reserved deprecated parked]
	Status string `json:"status,omitempty"`

	// tags
	Tags []*NestedTag `json:"tags,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// View
	// Required: true
	View *int64 `json:"view"`
}

// Validate validates this writable zone
func (m *WritableZone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameservers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaMinimum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaMname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaRetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaRname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaSerial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoaTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableZone) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateDefaultTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultTTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("default_ttl", "body", m.DefaultTTL, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("default_ttl", "body", m.DefaultTTL, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 200); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateNameservers(formats strfmt.Registry) error {
	if swag.IsZero(m.Nameservers) { // not required
		return nil
	}

	for i := 0; i < len(m.Nameservers); i++ {
		if swag.IsZero(m.Nameservers[i]) { // not required
			continue
		}

		if m.Nameservers[i] != nil {
			if err := m.Nameservers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nameservers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nameservers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WritableZone) validateSoaExpire(formats strfmt.Registry) error {

	if err := validate.Required("soa_expire", "body", m.SoaExpire); err != nil {
		return err
	}

	if err := validate.MinimumInt("soa_expire", "body", *m.SoaExpire, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("soa_expire", "body", *m.SoaExpire, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaMinimum(formats strfmt.Registry) error {

	if err := validate.Required("soa_minimum", "body", m.SoaMinimum); err != nil {
		return err
	}

	if err := validate.MinimumInt("soa_minimum", "body", *m.SoaMinimum, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("soa_minimum", "body", *m.SoaMinimum, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaMname(formats strfmt.Registry) error {

	if err := validate.Required("soa_mname", "body", m.SoaMname); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaRefresh(formats strfmt.Registry) error {

	if err := validate.Required("soa_refresh", "body", m.SoaRefresh); err != nil {
		return err
	}

	if err := validate.MinimumInt("soa_refresh", "body", *m.SoaRefresh, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("soa_refresh", "body", *m.SoaRefresh, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaRetry(formats strfmt.Registry) error {

	if err := validate.Required("soa_retry", "body", m.SoaRetry); err != nil {
		return err
	}

	if err := validate.MinimumInt("soa_retry", "body", *m.SoaRetry, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("soa_retry", "body", *m.SoaRetry, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaRname(formats strfmt.Registry) error {

	if err := validate.Required("soa_rname", "body", m.SoaRname); err != nil {
		return err
	}

	if err := validate.MinLength("soa_rname", "body", *m.SoaRname, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("soa_rname", "body", *m.SoaRname, 255); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaSerial(formats strfmt.Registry) error {
	if swag.IsZero(m.SoaSerial) { // not required
		return nil
	}

	if err := validate.MinimumInt("soa_serial", "body", *m.SoaSerial, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("soa_serial", "body", *m.SoaSerial, 4.294967295e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateSoaTTL(formats strfmt.Registry) error {

	if err := validate.Required("soa_ttl", "body", m.SoaTTL); err != nil {
		return err
	}

	if err := validate.MinimumInt("soa_ttl", "body", *m.SoaTTL, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("soa_ttl", "body", *m.SoaTTL, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

var writableZoneTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","reserved","deprecated","parked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		writableZoneTypeStatusPropEnum = append(writableZoneTypeStatusPropEnum, v)
	}
}

const (

	// WritableZoneStatusActive captures enum value "active"
	WritableZoneStatusActive string = "active"

	// WritableZoneStatusReserved captures enum value "reserved"
	WritableZoneStatusReserved string = "reserved"

	// WritableZoneStatusDeprecated captures enum value "deprecated"
	WritableZoneStatusDeprecated string = "deprecated"

	// WritableZoneStatusParked captures enum value "parked"
	WritableZoneStatusParked string = "parked"
)

// prop value enum
func (m *WritableZone) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, writableZoneTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WritableZone) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WritableZone) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) validateView(formats strfmt.Registry) error {

	if err := validate.Required("view", "body", m.View); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this writable zone based on the context it is used
func (m *WritableZone) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActive(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNameservers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableZone) contextValidateActive(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "last_updated", "body", m.LastUpdated); err != nil {
		return err
	}

	return nil
}

func (m *WritableZone) contextValidateNameservers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nameservers); i++ {

		if m.Nameservers[i] != nil {
			if err := m.Nameservers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nameservers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nameservers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WritableZone) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WritableZone) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritableZone) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritableZone) UnmarshalBinary(b []byte) error {
	var res WritableZone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
